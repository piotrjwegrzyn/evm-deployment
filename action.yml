name: 'EVM smart contract deployment'
description: 'Deploy and verify a smart contract on any EVM chain'
author: 'Piotr WÄ™grzyn <piotr@wegrzyn.dev>'
branding:
  icon: 'arrow-up-circle'
  color: 'orange'

inputs:
  contract-name:
    description: "Name of the contract to deploy."
    required: true
  contract-filename:
    description: "Name of the sol file with contract to deploy."
    required: true
  contract-connector:
    description: "Name for JSON file with ABI and contract address."
    required: true
  parent-dir:
    description: "Parent directory of source files and `out`."
    required: true
    default: "."
  rpc-url:
    description: "URL of the RPC to use to deploy the contract."
    required: true
  deployer-pk:
    description: "Private key to use for deployment."
    required: true
  constructor-args:
    description: "Arguments to pass to the contract's constructor."
    required: false
    default: ""
  verify:
    description: "Whether we must verify the contract or not on etherscan. If set to `true`, `etherscan-url` and `etherscan-api-key` are required."
    required: false
    default: false
  etherscan-url:
    description: "URL of the etherscan endpoint to use for verification and reporting."
    required: false
    default: ""
  etherscan-api-key:
    description: "API key used for verification."
    required: false
    default: ""
outputs:
  contract-address:
    description: "Address the contract was deployed to"
    value: ${{ steps.summary.outputs.deployedTo }}
  transaction-hash:
    description: "Hash of the deployment transaction"
    value: ${{ steps.summary.outputs.transactionHash }}


runs:
  using: "composite"
  steps:
    - name: Check values
      run: |
        if [[ "${{ inputs.verify }}" == "true" ]]; then
          if [[ "${{ inputs.etherscan-url }}" == "" || "${{ inputs.etherscan-api-key }}" == "" ]]; then
            echo "Missing `etherscan-url` and `etherscan-api-key` required for verification."
            exit 1
          fi
        fi
      shell: bash
    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1
    - name: Install jq
      uses: dcarbone/install-jq-action@v2.1.0
    - name: Build contract
      run: |
        forge build ${{ inputs.parent-dir }} --out ${{ inputs.parent-dir }}/out/ --skip 'test.sol'
      shell: bash
    - name: Deploy contract
      id: deploy
      env:
        ETHERSCAN_URL: ${{ inputs.etherscan-url }}
        ETHERSCAN_API_KEY: ${{ inputs.etherscan-api-key }}
      run: |
        createArguments="${{ inputs.parent-dir }}/${{ inputs.contract-filename }}.sol:${{ inputs.contract-name }} --retries 10 --json --rpc-url=${{ inputs.rpc-url }} --private-key=${{ inputs.deployer-pk }}"
        if [[ "${{ inputs.verify }}" == "true" ]]; then
          createArguments="${createArguments} --verify"
        fi
        if [[ "${{ inputs.constructor-args }}" != "" ]]; then
          createArguments="${createArguments} --constructor-args ${{ inputs.constructor-args }}"
        fi
        createOutput=$(eval "forge create ${createArguments}")
        echo "forge create output:\n\n${createOutput}"
        deploymentOutput=`echo "${createOutput}" | head -1`
        echo "deploymentOutput=${deploymentOutput}" >> $GITHUB_OUTPUT
        abi=$(eval "cat ${{ inputs.parent-dir }}/out/${{ inputs.contract-filename }}.sol/${{ inputs.contract-name }}.json | jq -r '.abi'")
        address=$(eval "echo "\$dupa" | jq -r '.deployedTo'")
        echo "{\"contract_abi\": $abi, \"contract_address\": \"$address\"}" >> ${{ inputs.parent-dir }}/out/${{ inputs.contract-connector }}.json
      shell: bash
    - name: Upload ABI artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.contract-name }}.abi.json
        path: ${{ inputs.parent-dir }}/out/${{ inputs.contract-filename }}.sol/${{ inputs.contract-name }}.json
    - name: Upload contract connector
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.contract-connector }}.json
        path: ${{ inputs.parent-dir }}/out/${{ inputs.contract-connector }}.json
    - name: Log summary of deployment
      id: summary
      run: |
        echo "# Contract ${{ inputs.contract-name }} deployed :rocket:" >> $GITHUB_STEP_SUMMARY
        deployer="${{ fromJson(steps.deploy.outputs.deploymentOutput).deployer }}"
        echo "deployer=${deployer}" >> $GITHUB_OUTPUT
        deployedTo="${{ fromJson(steps.deploy.outputs.deploymentOutput).deployedTo }}"
        echo "deployedTo=${deployedTo}" >> $GITHUB_OUTPUT
        transactionHash="${{ fromJson(steps.deploy.outputs.deploymentOutput).transactionHash }}"
        echo "transactionHash=${transactionHash}" >> $GITHUB_OUTPUT
        echo "- Deployer: ${deployer}" >> $GITHUB_STEP_SUMMARY
        echo "- Deployed to: ${deployedTo}" >> $GITHUB_STEP_SUMMARY
        echo "- Transaction hash: ${transactionHash}" >> $GITHUB_STEP_SUMMARY
      shell: bash
